% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simSingleTraitInbred.R
\name{simSingleTraitInbred}
\alias{simSingleTraitInbred}
\title{simSingleTraitInbred function}
\usage{
simSingleTraitInbred(founderPop, paramL, simParam = SP,
  returnFunc = identity, verbose = TRUE, checkParam = TRUE,
  GSfunc = NULL, switchGSfunc = 4, k = 1, ...)
}
\arguments{
\item{founderPop}{and object of Pop-class}

\item{paramL}{parameter list. See details for parameter values.}

\item{simParam}{an object of an object of SimParam. Default is current global-env SP (see AlphaSimR manual for details)}

\item{returnFunc}{function, typically used to extract summary statistics from breeding program populations. Default is identity, which returns a list of populations in RCRS and VDP.}

\item{verbose}{logical. Should information abou the breeding population be printed to stdout? Default is TRUE}

\item{checkParam}{logical. Should the parameter list be checked prior to running simulation? Default is TRUE}

\item{GSfunc}{function to estimate marker effects, must return an object of RRsol-class, SCAsol-class, or GCAsol-class. Default is NULL, which will use RRBLUP() until the number of individuals exceeds the number of markers * switchGSfunc, and will switch to RRBLUP2() for computational speed.}

\item{switchGSfunc}{integer. Used to determine when to switch from RRBLUP to RRBLUP2 when the number of individuals exceeds number of markers * switchGSfunc. Default is 4.}

\item{k}{integer. Index of paramL$founderSamples to be used. Only used when paramL$founderSamples is a listof length > 1.}
}
\value{
[value]
}
\description{
function to (do something)
}
\details{
parameter list must contain the following elements to specify the breeding program. 

paramL <- list(

maxIter = 1000L, # integer. maximum iterations for GSfunc

lgen = 4L, # integer. number of last generations to use for training GS model, greatly speeds up simulation to only use phenotypes from the last few generations to train the model

useTruth = 0L,  # logical or integer. If set to 0, breeding program uses markers and phenotypes for training/selection. If set to 1, simulation uses QTL instead of markers, and if set to 2, simulation uses QTL and true breeding values instead of phenotypes for selection

traditional = FALSE,  # logical or integer. A traditional program has no RCRS population, but instead selects the best individuals from the trial indicated by the argument (e.g. traditional = 2 selects new cadidates from the 2nd trial), and crosses them to an elite population that is updated with the best lines at the end of each year. 

intAcross = 1, # numeric. proportion of families to select from when traditional > 0. Valid between 0 and 1.  

intWithin = 0.2, # numeric. proportion of individuals within families to select from when traditional > 0. Valid between 0 and 1.

founderSamples = NULL, # integer vector. Which individuals in the founder population should be sampled. Used when repeating simulations with different starting populations

founderh2 = 0.3, # numeric. heritability of phenotypes of founder population to be used for intial selection from the founder population. Valid between 0 and 1.  

founderBurnIn = 1L, # interger. Number of generations of random mating within founder population before breeding program begins.

founderReps = 1L, # integer. number of replicates for founder population phenotypes

founderKeep = 4L, # integer. Number of generations to include founder population phenotypes for training model.

selectRCRS = 0.3, # numeric. selection intensity within recurrent population, only used for truncation selection. Valid between 0 and 1.  

pullCycle = NULL,  # integer. Cycle (within generation) at which to branch material from RCRS, valid between 0 and cyclePerYr, where lower integers branch earlier.

nProgenyPerCrossIn = 1L, # Number of progeny per cross within RCRS (check this!)

nProgenyPerCrossOut = 1L, # Number of progeny per cross of material exiting RCRS for VDP

useIn = "ebv",  # selection criterion for within RCRS. Typically wont deviate from 'ebv'

useOut = "ebv",  # selection criterion for pulling material out of RCRS. Typically wont deviate from 'ebv'

useInbreed = "ebv",  # selection criterion for lines within family during inbreeding. Only used when withinFamInt < 1. Typically wont deviate from 'ebv'

useVDP = "pheno",  # selection criterion for advancing lines through the VDP. Typically 'pheno', but can also be 'ebv' if the user decides to use both phenotypes and genotypes for selection

returnVDPcrit = "pheno",  # criterion used to determine best lines for return of material from VDP into RCRCS. Typically 'pheno', but can also be 'ebv'.

selFuncOut = NULL,  # function that selects individuals out of RCRS. Takes in and outputs an argument of Pop-class.

selFuncIn = NULL,  # function that selects individuals within the RCRS. Takes in and outputs an argument of Pop-class.

selFuncVDP = NULL,  # function that selects individuals within the VDP. Takes in and outputs an argument of Pop-class.

inbreedFunc = NULL,  # function that selects individuals during the inbreeding stage. Only used when withinFamInt < 1. Takes in and outputs an argument of Pop-class.

withinFamInt = 1,  # intensity of selection within family before lines are entered into the VDP. forces famSize to be famSize / withinFamInt before the selection happens. 

setXint = NULL,  # Set intensity used for quantile selection. [explain further]

skip = NULL, # integer vector of length up to length(selectTrials) specifying which trials should be skipped, i.e. use 'ebv' for selection instead of phenotyping.

nFounder = 100, # integer. Number of founders to be used.  

nRCRS = 100, # integer. RCRS population size. [should modify to let change through time?]

nFam = 10, # integer. number of families evaluated per year

famSize = 50, # integer. family size. total size of first trial is then nFam * famSize

ssd = FALSE, # logical. Should single seed decent be used? If FALSE, doubled haploids are produced. If TRUE, the population is selfed at every generation to produce one distinct individual 

selF2 = FALSE, # logical. Should selection within the F2 generation be performed. [not sure this works anymore] 

nF2 = 1, # integer. number of F2 individuals to be selected from if selF2 = TRUE. 

Vg = 1, # numeric. Genetic variance of founder population.

updateVg = FALSE, # logical. should Vg be held constant? If FALSE, heritability will change with decreasing Vg. If TRUE, heritability will be updated with current Vg (note this is not realistic). 

h2 = c(0.3, 0.3, 0.3, 0.3), # numeric vector, length of number of trials, with plot level heritability of each trial. Valid between 0 and 1.

nYr = 30, # integer. Number of years to run the breeding program. Phenotype trials will continue to nYr + number of trials

selectTrials = c(0.5, 0.2, 0.5, 0.4), # numeric. Selection intensity within each trial. Valid between 0 and 1. Alternatively, positive integers can be provided to indicate the number of lines selected at each stage.

trialReps = c(1, 2, 3, 3), # integer vector of length trials. Number of reps at each trial. 

trialLocs = c(1, 2, 5, 5), # integer vector of length trials. Number of locations for each trial. 

cyclePerYr = 3, # integer. number of cycles per year in RCRS. 

returnVDPtoRCRS = c(0, 0, 0, 0, 0),  # numeric. proportion of the best lines from each trial to be returned to the RCRS 

nGenOut = NULL, # integer. number of generations prior to current RCRS cycle for selecting lines for VDP. default is cyclePerYr - pullCycle

nGenInbr = NULL, # integer. Number of generations of inbreeding lines destined for VDP. Only valid when inbreedFunc is NULL. Default is cyclePerYr.

phenoRCRS = 0, # numeric. proportion of famSize to be used for phenotyping inbred lines out of RCRS population 

separateTrain = FALSE # logical. Should only phenotyped individuals from RCRS be used to train model for selection within RCRS? Only used when phenoRCRS > 0.

)
}
\examples{
none
}
